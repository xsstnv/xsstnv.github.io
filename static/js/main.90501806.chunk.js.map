{"version":3,"sources":["components/pages/Pages.module.css","containers/pages/Homepage.js","components/pages/Pages.js","containers/layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","React","Component","Pages","className","classes","Content","exact","path","component","key","menuItems","label","uri","withRouter","props","useState","visible","setVisible","onClick","history","push","onInit","typewriter","typeString","pauseFor","deleteChars","start","isBrowser","isMobile","map","menuItem","class","width","height","viewBox","fill","xmlns","d","aria-role","href","App","Layout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,QAAU,yB,sMCabC,E,4JAVX,WAEI,OACI,6BACI,mD,GANOC,IAAMC,W,OCadC,EAVD,WACV,OACI,yBAAKC,UAAWC,IAAQC,SACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,EAAUU,IAAI,gB,wBCHzDC,EAAY,CACd,CACIC,MAAO,QACPC,IAAK,SAET,CACID,MAAO,QACPC,IAAK,SAET,CACID,MAAO,UACPC,IAAK,YA6EEC,eAzEO,SAAAC,GAAU,IAAD,EAEGd,IAAMe,UAAS,GAFlB,mBAEpBC,EAFoB,KAEXC,EAFW,KAI3B,OACI,yBAAKd,UAAU,aACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,OAAOe,QAAS,kBAAMJ,EAAMK,QAAQC,KAAK,OACpD,kBAAC,IAAD,CACIC,OAAQ,SAAAC,GACJA,EACKC,WAAW,iBACXC,SAAS,KACTC,YAAY,GACZF,WAAW,SACXG,YAIjB,0BAAMvB,UAAU,gBACZ,yBAAKA,UAAU,QACVwB,aAAcC,YAAYZ,GACvB,wBAAIb,UAAU,cACTO,EAAUmB,KAAI,SAAAC,GAAQ,OACnB,wBAAIZ,QAAS,kBAAMJ,EAAMK,QAAQC,KAAKU,EAASlB,OAAOkB,EAASnB,YAK/E,0BAAMoB,MAAM,gBACR,yBAAKA,MAAM,gBAAgBC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BACpF,0BAAMC,EAAC,sWASdT,YACG,0BAAMG,MAAM,eAAeb,QAAS,kBAAMD,GAAYD,KAClD,yBAAKoB,MAAM,6BAA6BD,KAAK,OAAOD,QAAQ,aACxD,0BAAMG,EAAE,gBAAgBF,KAAK,SAC7B,0BAAME,EAAE,uDAOhC,yBAAKlC,UAAU,WACX,0BAAMmC,YAAU,QACZ,kBAAC,EAAD,QAGR,yBAAKnC,UAAU,UACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,kBAAf,4BAC+B,uBAAGoC,KAAK,8BAAR,oBAGnC,yBAAKpC,UAAU,gBACX,yBAAKA,UAAU,kBAAf,gBACmB,uBAAGoC,KAAK,yBAAR,SADnB,cAC2E,uBAAGA,KAAK,8BAAR,kB,OC1EhFC,EARH,kBACV,6BACA,kBAAC,IAAD,KACE,kBAACC,EAAD,SCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90501806.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Pages_Content__3-rwp\"};","import React from 'react';\n\nclass Homepage extends React.Component {\n\n    render() {\n\n        return (\n            <div>\n                <h1>Martin Stoynov</h1>\n            </div>\n        )\n    }\n}\n\nexport default Homepage;","import React from 'react';\nimport classes from './Pages.module.css';\nimport Homepage from '../../containers/pages/Homepage';\nimport { Route, Switch } from 'react-router-dom';\n\nconst Pages = () => {\n    return (\n        <div className={classes.Content}>\n            <Switch>\n                <Route exact path=\"/\" component={Homepage} key=\"homepage\" />\n            </Switch>\n        </div>\n    );\n}\n\nexport default Pages;","import React from 'react';\nimport Pages from '../../components/pages/Pages';\nimport { withRouter } from 'react-router-dom';\nimport Typewriter from 'typewriter-effect';\nimport { isBrowser, isMobile } from \"react-device-detect\";\n\nconst menuItems = [\n    {\n        label: 'About',\n        uri: 'about'\n    },\n    {\n        label: 'Posts',\n        uri: 'posts'\n    },\n    {\n        label: 'Project',\n        uri: 'project'\n    }\n];\n\nconst LayoutContent = props => {\n\n    const [visible, setVisible] = React.useState(false);\n\n    return (\n        <div className=\"container\">\n            <div className=\"header\">\n                <div className=\"header-inner\">\n                    <div className=\"logo\" onClick={() => props.history.push(\"/\")}>\n                        <Typewriter\n                            onInit={typewriter => {\n                                typewriter\n                                    .typeString('> $ cd /root/')\n                                    .pauseFor(500)\n                                    .deleteChars(5)\n                                    .typeString('home/')\n                                    .start();\n                            }}\n                        />\n                    </div>\n                    <span className=\"header-right\">\n                        <nav className=\"menu\">\n                            {isBrowser || (isMobile && visible) &&\n                                <ul className=\"menu-inner\">\n                                    {menuItems.map(menuItem => (\n                                        <li onClick={() => props.history.push(menuItem.uri)}>{menuItem.label}</li>\n                                    ))}\n                                </ul>\n                            }\n                        </nav>\n                        <span class=\"theme-toggle\">\n                            <svg class=\"theme-toggler\" width=\"24\" height=\"24\" viewBox=\"0 0 48 48\" fill=\"#333\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d={`\n                                            M22 41C32.4934 41 41 32.4934 41 22C41 11.5066 32.4934 3 22\n                                            3C11.5066 3 3 11.5066 3 22C3 32.4934 11.5066 41 22 41ZM7 22C7\n                                            13.7157 13.7157 7 22 7V37C13.7157 37 7 30.2843 7 22Z\n                                        `}>\n                                </path>\n                            </svg>\n                        </span>\n\n                        {isMobile &&\n                            <span class=\"menu-trigger\" onClick={() => setVisible(!visible)}>\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#333\" viewBox=\"0 0 24 24\">\n                                    <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\n                                    <path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"></path>\n                                </svg>\n                            </span>\n                        }\n                    </span>\n                </div>\n            </div>\n            <div className=\"content\">\n                <main aria-role=\"main\">\n                    <Pages />\n                </main>\n            </div>\n            <div className=\"footer\">\n                <div className=\"footer-inner\">\n                    <div className=\"footer-content\">\n                        Project maintained by&#160;<a href=\"https://github.com/xsstnv/\">Martin Stoynov</a>\n                    </div>\n                </div>\n                <div className=\"footer-inner\">\n                    <div className=\"footer-content\">\n                        Thanks to&#160;<a href=\"https://www.jomar.fr/\">Jomar</a>&#160;and&#160;<a href=\"https://github.com/rhazdon\">rhazdon</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(LayoutContent);","import React from 'react';\nimport Layout from './containers/layout/Layout';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst App = () => (\n  <div>\n  <Router>\n    <Layout />\n  </Router>\n</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}